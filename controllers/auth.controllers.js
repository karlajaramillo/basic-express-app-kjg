const User = require("../models/User.model"); // require "User" model

// the setup code skipped
const bcryptjs = require('bcryptjs');

// GET request - signup
async function getSignup(req, res, next) {
  try {
      // if there is an err in the url, it will passed to the view 'auth/signup' ans be shown
      const { err } = req.query;
      res.render('auth/signup', { err });
    } catch(error) {
        console.error(`Something wrong happened, please try again! ${error}`)
      next(error)
    }
  };

// GET request - login
async function getLogin(req, res, next)  {
  try {
    // if there is an err in the url, it will passed to the view 'auth/login' ans be shown
    const { err } = req.query;
    res.render('auth/login', { err });
  } catch(error) {
      console.error(`Something wrong happened, please try again! ${error}`)
      next(error)
  }
};

// POST request - signup
async function signup(req, res, next)  {
  try {
    const { username, email, password } = req.body;
    // console.log("The form data: ", req.body);
    
    const hassMissingCredentials = !email || !password || !username;
    if (hassMissingCredentials ) {
      return res.redirect("/signup?err=Missing credentials");
    }
    //salt rounds is a number from 0 to 20 that defines the complexity of the salt
    const saltRounds = 10;
    // salt is a random string generated by bcryptjs to add complexity in the hash
    const salt = await bcryptjs.genSalt(saltRounds);
    // hash the password received from the req.body
    // create the has out of the password and the salt
    const hashedPassword = await bcryptjs.hash(password, salt);
    const newUser = await User.create({ // based on the Model  -> 'User'
      username,
      email,
      passwordHash: hashedPassword,
    });
    console.log('Newcreated user is: ', newUser);
    res.redirect('/private');
  } catch(error) {
    console.error(`Something wrong creating with the sign up! ${error}`);
    next(error);
    return res.redirect("/signup?err=Something went wrong");
  }
};

// POST request - login
async function login(req, res, next) {
  try {
   const { email, password } = req.body;
   // console.log("The form data: ", req.body);
   
   const hassMissingCredentials = !email || !password;
   if (hassMissingCredentials ) {
     return res.redirect("/login?err=Missing credentials");
   }
   // email is unique
   const user = await User.findOne( { email });
   console.log(email);
   if (!user) {
     return res.redirect("/login?err=The user wasn't found");
   }
   const verify = await bcryptjs.compareSync(password, user.passwordHash);
   if (verify) {
     return res.redirect("/private");
   }
   return res.redirect("/login?err=Something went wrong");
  } catch(error) {
   console.error(`Something wrong creating with the sign up! ${error}`);
   next(error);
   return res.redirect("/login?err=Something went wrong");
  }
 }
// exports the functions to use it in Routes > routes/auth.routes.js
module.exports = { getSignup, getLogin, signup, login };


